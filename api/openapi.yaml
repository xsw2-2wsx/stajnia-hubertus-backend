openapi: 3.0.4
info:
  title: Hubertus Stable
  description: This project allows for making online bookings for a
    riding hall in a stable.
  version: 0.1.0
servers:
  - url: http://localhost:8080
    description: development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Id:
      description: An unique identifier. When creating a new entity, leave it at 0 for it to be choosen automatically
      type: integer
      minimum: 0

    Time:
      description: Represents a time of the day
      type: string
      pattern: "^(2[0-3]|[01][0-9]):?([0-5][0-9]):?([0-5][0-9])$"
      example: "14:04:25"
      format: time


    ApiSubError:
      description: A standard sub error schema
      type: object
      properties:
        message:
          type: string
        suggestedAction:
          type: string

    ApiError:
      description: A standard error schema
      properties:
        status:
          type: integer
          minimum: 400
          description: A HTTP error code
        message:
          type: string
        suggestedAction:
          type: string
        subErrors:
          type: array
          items:
            $ref: "#/components/schemas/ApiSubError"


    User:
      description: Represents a user
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
        phone:
          type: string
        email:
          type: string
        locked:
          type: boolean
      required:
        - id
        - name
        - locked

    AuthenticationRequest:
      description: Allows for authentication
      properties:
        username:
          type: string
          description: Username of the user
        password:
          type: string
          description: User password
      required:
        - username
        - password

    AuthenticatedResponse:
      description: Response sent upon sucessfull authentication
      properties:
        token:
          type: string
          description: A web token that allows for future authentication

    UserPassword:
      description: Contains a password for the user
      properties:
        newPassword:
          type: string

    ActivityConstraint:
      description: Represents a single time constraint for activity. It allows the actvity to take place within a range
      properties:
        startTime:
          $ref: "#/components/schemas/Time"
        endTime:
          $ref: "#/components/schemas/Time"
      required:
        - startTime
        - endTime

    Activity:
      description: Represents a single activity
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
        description:
          type: string
        points:
          type: number
          minimum: 0
        constraints:
          type: array
          items:
            $ref: "#/components/schemas/ActivityConstraint"
      required:
        - id
        - name
        - description
        - points
        - constraints

    ConfigurationEntry:
      description: Holds a key-value configuration pair
      properties:
        key:
          type: string
        value:
          type: string
      required:
        - key
        - value

    ConfigurationGroupKey:
      description: A set of configuration entries
      properties:
        key:
          type: string
        name:
          type: string
        description:
          type: string
      required:
        - key
        - name
        - description

    ConfigurationKey:
      description: Metadata about entry
      properties:
        key:
          type: string
        name:
          type: string
        defaultValue:
          type: string
        description:
          type: string
      required:
        - key
        - name
        - defaultValue
        - description

    ConfigurationEntrySchema:
      description: Key metadata and current value
      properties:
        key:
          $ref: "#/components/schemas/ConfigurationKey"
        value:
          type: string
      required:
        - key
        - value


  requestBodies:
    AuthenticationRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthenticationRequest"
      required: true

    UserRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
      required: true

    ActivityRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Activity"
      required: true

    ConfigurationEntryRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ConfigurationEntry"
      required: true

  responses:
    ApiErrorResponse:
      description: A response sent upon an error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"

    AuthenticatedResponse:
      description: A response containing authentication token
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthenticatedResponse"

    UserResponse:
      description: Contains a single user
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"

    UserListResponse:
      description: Contains a list of users
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"


    UserPasswordResponse:
      description: Contains a new password for user
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserPassword"

    ActivityResponse:
      description: Contains a single activity
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Activity"

    ActivityListResponse:
      description: Contains a list of activities
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Activity"

    ConfigurationGroupsResponse:
      description: Constains configuration groups
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ConfigurationGroupKey"

    ConfigurationEntrySchemaRespone:
      description: Contains configuration entry schema
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ConfigurationEntrySchema"

    ConfigurationEntryResponse:
      description: Contains a single configuration entry
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ConfigurationEntry"




security:
  - bearerAuth: []

tags:
  - name: authentication
  - name: user managment
  - name: activities
  - name: configuration

paths:
  /auth:
    summary: Allows for obtaining authentication token
    post:
      tags:
        - authentication
      requestBody:
        $ref: "#/components/requestBodies/AuthenticationRequestBody"
      responses:
        '200':
          $ref: "#/components/responses/AuthenticatedResponse"
        default:
          $ref: "#/components/responses/ApiErrorResponse"

  /users:
    summary: Manages users
    get:
      description: Fetches all users
      tags:
        - user managment
      responses:
        '200':
          $ref: "#/components/responses/UserListResponse"
        default:
          $ref: "#/components/responses/ApiErrorResponse"

    post:
      description: Creates a user with specified username and sends back its password
      tags:
        - user managment
      requestBody:
        $ref: "#/components/requestBodies/UserRequestBody"
      responses:
        '200':
          $ref: "#/components/responses/UserPasswordResponse"
        default:
          $ref: "#/components/responses/ApiErrorResponse"


    put:
      description: Edits a user
      tags:
        - user managment
      requestBody:
        $ref: "#/components/requestBodies/UserRequestBody"
      responses:
        '200':
          description: Operation successfull
        default:
          $ref: "#/components/responses/ApiErrorResponse"



    delete:
      description: Deletes specified user
      tags:
        - user managment
      parameters:
        - name: userId
          in: query
          required: true
          description: An id of user to be deleted
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        '200':
          description: Operation sucessfull
        default:
          $ref: "#/components/responses/ApiErrorResponse"

  /users/{userId}:
    summary: Operations on the user with specified id
    get:
      tags:
        - user managment
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Id"

      responses:
        '200':
          $ref: "#/components/responses/UserResponse"
        default:
          $ref: "#/components/responses/ApiErrorResponse"

  /users/{userId}/resetpassword:
    summary: Resets specified user password
    patch:
      tags:
        - user managment
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        '200':
          $ref: "#/components/responses/UserPasswordResponse"
        default:
          $ref: "#/components/responses/ApiErrorResponse"


  /activities:
    summary: Operations on Activities and their constraints
    get:
      tags:
        - activities
      responses:
        '200':
          $ref: "#/components/responses/ActivityListResponse"
        default:
          $ref: "#/components/responses/ApiErrorResponse"

    post:
      tags:
        - activities
      description: Creates a new activity
      requestBody:
        $ref: "#/components/requestBodies/ActivityRequestBody"
      responses:
        '200':
          description: Activity addedd
        default:
          $ref: "#/components/responses/ApiErrorResponse"

    put:
      tags:
        - activities
      description: Replaces an Activity
      requestBody:
        $ref: "#/components/requestBodies/ActivityRequestBody"
      responses:
        '200':
          description: Activity addedd
        default:
          $ref: "#/components/responses/ApiErrorResponse"

    delete:
      tags:
        - activities
      description: Deletes specified activity
      parameters:
        - name: activityId
          in: query
          required: true
          description: An id of activity to be deleted
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        '200':
          description: Operation sucessfull
        default:
          $ref: "#/components/responses/ApiErrorResponse"

  /activities/{activityId}:
    summary: Operations on the activity with specified id
    get:
      tags:
        - activities
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Id"

      responses:
        '200':
          $ref: "#/components/responses/ActivityResponse"
        default:
          $ref: "#/components/responses/ApiErrorResponse"


  /configuration:
    summary: App configuration
    get:
      tags:
        - configuration
      responses:
        '200':
          $ref: "#/components/responses/ConfigurationGroupsResponse"
        default:
          $ref: "#/components/responses/ApiErrorResponse"

  /configuration/{groupKey}:
    summary: Operation on configuration group
    parameters:
      - name: groupKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - configuration
      responses:
        '200':
          $ref: "#/components/responses/ConfigurationEntrySchemaRespone"
        default:
          $ref: "#/components/responses/ApiErrorResponse"

    post:
      tags:
        - configuration
      requestBody:
        $ref: "#/components/requestBodies/ConfigurationEntryRequestBody"
      responses:
        '200':
          description:  Operation completed successfully
        default:
          $ref: "#/components/responses/ApiErrorResponse"


  /configuration/{groupKey}/{key}:
    summary: Operations on a specific entry
    parameters:
      - name: groupKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string

    get:
      tags:
        - configuration
      responses:
        '200':
          $ref: "#/components/responses/ConfigurationEntryResponse"
        default:
          $ref: "#/components/responses/ApiErrorResponse"

    post:
      tags:
        - configuration
      requestBody:
        $ref: "#/components/requestBodies/ConfigurationEntryRequestBody"
      responses:
        '200':
          description:  Operation sucessfull
        default:
          $ref: "#/components/responses/ApiErrorResponse"

    delete:
      tags:
        - configuration
      responses:
        '200':
          description:  Operation sucessfull
        default:
          $ref: "#/components/responses/ApiErrorResponse"

